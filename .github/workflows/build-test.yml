name: Build & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read

jobs:
  build-test:
    name: Build & Test Application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: starter
        options: >-
          --health-cmd "pg_isready -U postgres -d starter" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/starter
      NODE_ENV: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma:generate

      - name: Run linting
        run: pnpm run lint

      - name: Type check
        run: pnpm tsc -p tsconfig.json --noEmit

      - name: Build application
        run: pnpm run build

      - name: Unit tests
        run: pnpm test -- --coverage

      - name: E2E tests
        run: pnpm test:e2e

      - name: Upload build artifacts
        if: matrix.node-version == 22
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

      - name: Comment on PR if build fails
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Build failed on Node.js ${{ matrix.node-version }}. Please check the logs.`
            })
