name: ðŸš€ Deploy

on:
  push:
    branches:
      - dev
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-dev:
    name: ðŸš€ Deploy to Dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pre-deployment checks
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          pnpm run lint
          pnpm tsc -p tsconfig.json --noEmit
          pnpm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=dev-
            type=raw,value=dev-latest

      - name: Build and push Docker image (dev)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.alpine
          target: dev
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=development

      - name: Deploy to dev using Docker Compose
        run: |
          cat > .env.dev << EOF
          NODE_ENV=development
          EXTERNAL_PORT=3000
          INTERNAL_PORT=3000
          DEPLOYMENT_ENV=dev
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          EOF

          docker compose -f docker-compose.dev.yml --env-file .env.dev down || true
          docker compose -f docker-compose.dev.yml --env-file .env.dev up -d

      - name: Wait for deployment
        run: |
          sleep 20

      - name: Health check (dev)
        run: |
          max_attempts=10
          attempt=1
          until curl -fsS http://localhost:3000/ || [ $attempt -gt $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts failed; retrying..."
            attempt=$((attempt+1))
            sleep 5
          done
          [ $attempt -le $max_attempts ]

  deploy-production:
    name: ðŸš€ Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          pnpm run lint
          pnpm tsc -p tsconfig.json --noEmit
          pnpm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=prod-
            type=raw,value=production-latest

      - name: Build and push Docker image (prod)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Deploy to production using Docker Compose
        run: |
          cat > .env.prod << EOF
          NODE_ENV=production
          EXTERNAL_PORT=3000
          INTERNAL_PORT=3000
          DEPLOYMENT_ENV=production
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          EOF

          docker compose -f docker-compose.prod.yml --env-file .env.prod down || true
          docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --build

      - name: Wait for deployment
        run: |
          sleep 30

      - name: Health check (prod)
        run: |
          max_attempts=15
          attempt=1
          until curl -fsS http://localhost:3000/ || [ $attempt -gt $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts failed; retrying..."
            attempt=$((attempt+1))
            sleep 6
          done
          [ $attempt -le $max_attempts ]
