name: nest-starter-dev

services:
  api:
    container_name: nest-api-dev
    working_dir: /app
    build:
      context: .
      dockerfile: Dockerfile.alpine
      target: dev
    command: sh -c "corepack enable && corepack prepare pnpm@9 --activate && pnpm install --no-frozen-lockfile && pnpm exec nest start --watch"
    env_file: .env.dev
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      DATABASE_URL: postgresql://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:${DATABASE_PORT:-5432}/${DATABASE_NAME:-starter}
    ports:
      - '${EXTERNAL_PORT:-3000}:${INTERNAL_PORT:-3000}'
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "const p=process.env.INTERNAL_PORT||3000; require(''http'').get(''http://127.0.0.1:''+p+''/'', r => process.exit(r.statusCode===200?0:1)).on(''error'', () => process.exit(1))" ',
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    networks:
      - nest-network

  postgres:
    image: postgres:15
    container_name: postgres-dev
    restart: unless-stopped
    ports:
      - '${DATABASE_PORT:-5432}:5432'
    env_file: .env.dev
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nest-network

  adminer:
    image: adminer:latest
    container_name: adminer-dev
    ports:
      - '${ADMINER_PORT:-8080}:8080'
    depends_on:
      - postgres
    networks:
      - nest-network

volumes:
  postgres-data:

networks:
  nest-network:
    driver: bridge
